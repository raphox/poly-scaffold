import React, { ReactNode } from "react";
import Link from "next/link";
import { Eye, Terminal } from "lucide-react";
import { useSearchParams } from "next/navigation";
import { useQuery } from "@tanstack/react-query";

import { api } from "@/services";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import Layout from "@/components/layout";
import { Props as PageProps } from "@/components/page";

export default function PagePage() {
  const searchParams = useSearchParams();
  const notice = searchParams.get("notice");

  const resetDataHandler = async () => {
    if (window.confirm("Are you sure you want to reset to default data?")) {
      await indexedDB.deleteDatabase("MyDatabase");
      window.location.reload();
    }
  };

  const { isPending, error, data } = useQuery<PageProps[]>({
    queryFn: () => api.get("/pages").then((res) => res.data),
    queryKey: ["pages"],
  });

  if (isPending) {
    return "Loading...";
  } else if (error) {
    return "An error has occurred: " + error.message;
  }

  return (
    <div className="prose mx-auto w-full lg:max-w-5xl">
      {notice && <p style={{ color: "green" }}>{notice}</p>}

      <h1>Pages</h1>

      <Alert variant="info" className="not-prose">
        <Terminal className="h-4 w-4" />
        <AlertTitle>Welcome developer!</AlertTitle>
        <AlertDescription>
          <p>
            You can create, update, or delete pages as needed. If you ever miss
            something important, you can reset the data to its default state.
            <br />
            This page was automatically generated by our scaffold script as a
            sample.
          </p>
          <p className="text-right w-full text-xs">
            Navigate through the sidebar to get more information or access{" "}
            <a
              href="https://github.com/raphox/poly-scaffold"
              target="_blank"
              className="underline"
            >
              Github
            </a>
            .
          </p>
        </AlertDescription>
      </Alert>

      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>ID</TableHead>
            <TableHead>Title</TableHead>
            <TableHead>Description</TableHead>
            <TableHead className="text-right">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {data.map((page) => (
            <TableRow key={page.id}>
              <TableCell>{page.id}</TableCell>
              <TableCell>{page.title}</TableCell>
              <TableCell>
                <div className="truncate max-w-lg">{page.description}</div>
              </TableCell>
              <TableCell className="text-right">
                <Link href={`/pages/${page.id}`}>
                  <Button size="sm" variant="ghost">
                    <Eye /> Show
                  </Button>
                </Link>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>

      <div className="flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2">
        <Button
          variant="ghost"
          className="text-destructive hover:bg-destructive hover:text-white"
          onClick={resetDataHandler}
        >
          Reset to default data
        </Button>
        <Link href="/pages/new">
          <Button>New page</Button>
        </Link>
      </div>
    </div>
  );
}

PagePage.getLayout = function getLayout(yeild: ReactNode) {
  return <Layout>{yeild}</Layout>;
};
