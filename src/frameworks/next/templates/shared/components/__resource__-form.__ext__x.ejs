<script setup lang="ts">
  import * as z from "zod";
  import type { TPostForm, TPostFormErrors, TPostZodSchema } from "./types";

  const form = defineModel<TPostForm>({ required: true });
  const errors = defineModel<TPostFormErrors>("errors", { required: true });
  const schema = z.object<TPostZodSchema>({
    title: z.string().nonempty(),
    description: z.string().nonempty(),
  });

  const { validate } = useZodValidator(form, errors, schema);

  const emit = defineEmits<{
    (e: "submit"): void;
  }>();

  const onFormSubmit = () => {
    if (validate()) emit("submit");
  };
</script>

<template>
  <form @submit.prevent="onFormSubmit">
    <div>
      <label htmlFor="title">Title:</label>
      <input type="string" v-model="form.title" />
      <span v-if="errors.title">{{ errors.title }}</span>
    </div>
    <div>
      <label htmlFor="description">Description:</label>
      <input type="text" v-model="form.description" />
      <span v-if="errors.description">{{ errors.description }}</span>
    </div>

    <!-- actions -->
    <slot name="actions" v-bind="{ onFormSubmit }">
      <div>
        <button type="submit">submit</button>
      </div>
    </slot>
  </form>
</template>
